{"./":{"url":"./","title":"Introduction","keywords":"","body":"подажите пожалуйтсо Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"如何提问.html":{"url":"如何提问.html","title":"如何提问","keywords":"","body":"如何提问 搜索引擎 谷歌,duckduckgo是最好的引擎,如果你是国外的华人. 在国内的使用bing.com国际版 最好别使用百度,你只会得到广告,使用这些东西,你可以直接得到答案. 重要的东西,比如说账号密码什么的别丢进去,服务器在国外,外国人是可以看得到的 如何提问 感谢外国的黑客们,为我们提供了丰富的知识 原文 中文 如果问题搜不到,建议使用 谷歌翻译,翻译成英文后进行润色,然后bing一下,你就得到答案了. Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"推荐资源.html":{"url":"推荐资源.html","title":"推荐资源","keywords":"","body":"推荐资源 法务 这些东西,建议咨询律师,消费的越多,赚的越多 雇佣一个律师又不是很贵 增值电信业务经营许可证 经济法 知识产权法 专利法 网络文化经营许可证 ICP经营许可证 游戏版号 游戏运营备案 计算机软件著作权 资金 Megagrant 大创网 论坛 CSDN StackOverflow 知乎教程 AnswerHub CSDN教程 IndieClub 百科 Community Wiki Blogger DawnArc IndieClub Markdown Mermaid Latex 比赛 LDJam 外国一年两度的游戏大赛 质量不如国内,谁让中国那么强大呢 腾讯 网易 在活动这一栏内 网易活动 Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"学习资料.html":{"url":"学习资料.html","title":"学习资料","keywords":"","body":"学习资料 先想一下自己要制作出什么样的游戏,然后按照自己的想法进行制作,遇到问题进行百度,按照自己的想法,边做边学是最快的学习方法. 可以让真正在私企工作的工程师,进行试卷的制作,让程序猿写最适合程序猿的试卷 一个好的大学老师不一定是一个好的程序总监,一个好的程序总监一定是一个好的大学老师. 程序总监的职能: 程序培训 代码审核 技术研发 无能者会被工具限制,有能者能够活学活用工具 进阶 游戏编程模式 GAS 虚幻编程模式 计算机图形学 Opengl即计算机图形学 第三方付费 Suki学院 虚幻基础 YouTuBe 谌嘉诚 官方文档 Git 许可证 其他技术 作为一个程序猿,如果你不能够自学,那么你就是渣渣/ 如果你到大学才开始学,那你就是一个废物. 上这个网站,需要什么技术现场学. 新技术 新手程序一个月学一门 普通程序一个星期入门一门 程序总监一个三天学一门 同一技术的变种,比如说C#和java和lua 程序总监,一个下午 W3School Runoob Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"软件推荐.html":{"url":"软件推荐.html","title":"软件推荐","keywords":"","body":"推荐软件 需要注意的是,PlasticScm并没有集成Bug管理软件,需要配合其他软件使用,比如说Jira. 杂项 名字 地址 简介 Jenkins Docker GitBook Jenkins Docker GitBook 简介: 分享策划文案 描述: 你可以通过xxxxx 版本管理 名字 地址 简介 Git PlasticScm 团队管理 名字 地址 简介 GitHub Space https://www.jetbrains.com/space/ GitLab BitBucker&Jira Trello 研发工具 推荐: Rider For Unreal 师生免费授权 Jetbrain教程 Jetbrain的产品,有着非常大的潜力,等待着我们挖掘,不过我并不是深度的程序猿,有推荐的视频欢迎随时上传 一定购买正版!!!!!! 推荐插件: Space,是Idea的插件,和团队管理软件Space结合用的 Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"必备插件.html":{"url":"必备插件.html","title":"必备插件","keywords":"","body":"必备插件 Level Design Assistant 地图编辑 Property Transfer Tool 转移变量 Magic Node 编写C++代码 Electronic Nodes 整理节点 表格 名字 地址 简介 LDAssistant Property Transfer Tool Magic Node Electronice Node Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"UITA.html":{"url":"UITA.html","title":"UITA","keywords":"","body":"UITA: UI= UI设计师 Technic= 技术 Artist= 美术 行业中的UITA UITA有目前有普通的两种 知道基础的建模知识,比如说AO,法线,LOD,面数这些的 如果是只需要知道美术方面的知识,那么随便一个初级工程师都是UITA 能建模,能设计UI,能搞程序 这个当程序不够精,当建模不够精 最多只可以起到润滑美术和程序的作用 如果你连一个会基础美术知识的程序都请不起,那么这种UITA是不错的选择 特效师 对,TA指的就是特效师, 因为特效Shader,Nigara这些必须是会程序与数学的美术搞的 这个是真的稀有人才, 因为必须会数学和美术, 程序简单的要死,初中生都学得会 说白了, 在我们行业,你只需达到中级的水平,你就得什么都会一点,如果你不会,那么你是一个渣渣 比如说某些小厂的Unity工程师,居然5k,天哪. 我对UITA的分类 初级工程师 知道建模,特效方面的大部分基础知识 技术美术 能够进行一些简单的建模,特效设计的工程师 也许因为我的朋友都是这种初级工程师, 一个人可以弄一个小的联网项目 所以这种事情,一般交给新来的人 比如: 丁冬和老何 特效师 Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"美术知识.html":{"url":"美术知识.html","title":"美术知识","keywords":"","body":"美术知识 本章节,主要是对各种专业名词进行通用的解释. 因为策划首先得是个程序,所以这里没有与程序交流的东西 2d Spine Spine官网 Spine是2d动画的骨架,什么是2d动画呢? 比如说你制作了一个拉杆 这个拉杆由底座和拉杆组成. 咱们拉杆使用的时候,得上下拉拉杆 咱们制作动物的时候,动物摇尾巴,也可以理解为拉杆剩下摇动. 这个拉杆就是骨骼 层级 层级就是两个图片显示的次序 这个图标是由两个图片组成的 什么是层级呢? 就是这两个图片谁在前谁在后 上图就是把箭头拖到红色圆圈后面的结果 提示: 层级一般与Z轴有关, 当Z轴靠近相机,层级则增加,Z轴远离相机,层级则减少 通用 线稿 线稿是一个非常抽象的概念. 就是一个美术资源,我们还没开始正式制作之前画的草图,都叫线稿 线稿的分类: UI线稿 2D场景线稿 3d场景线稿 模型线稿 烘培 烘培,是预处理数据的通用名词,程序中的计算和建模中的法线,AO的常用名词. 比如说,你要计算99乘法表,你有两种方法 每次需要的时候计算一下 2x3=2个3相加=6 5x5=5个5相加=25 或者说你可以烘培一下 就是预先把99乘法表的结果记下来 别人问你2x3=?你看了一下,自己有记载2x3=6 别人问你9x9=? 你的笔记本上写着 9x9=81 总结一下,烘培就是把东西预先做好,用的时候不需要再去做,直接用 对于程序: 烘培就是上面的99乘法表例子 对于AO: 烘培就是预先计算一下,光到这里会变暗 对于法线: ..我也不太好描述,希望后人可以把这一块补上 场景 环境光 环境光,就是MineCraft中荧石,火把,这类向四周发射光源的东西 方向光 方向光是天空中射下来的光 反光 模型 法线 知乎 参考文档 法线,说简单一点,就是让低模显示出高模型的效果 高模,就是细节很多的模型,低模就是细节很少的模型. 低模+法线 请忽略这个帽子,这个帽子是后面加上去的,专注于脸就可以了 最左边: 外星人低模 中间: 低模+高模型 右边: 低模+高模型+AO 上图的低模和上图的高模型 法线贴图是由高模烘培后的贴图,让低模+法线可以展现出和高模差不多的效果. AO(环境光遮蔽) 参考文档 环境光遮蔽, 就是阴影,比如说这种模型有夹缝,夹缝是照不到的,所以会显得黑 左图: 无AO 右图: 有AO AO只是对光线的遮挡,即如果光射到这里,会减少多少. 至于射入的光的方向,就和AO无关了 骨骼 骨骼就是橙色的线 IK/FK 动画机 蒙皮 Blend 权重 特效 特效 特效就是一个会程序的美术.. 参考文档 顶点 比如说水面流动,草浮动 片元 比如说disco球 粒子系统 Nigara 运营 ELO MMR Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"推荐设备.html":{"url":"推荐设备.html","title":"推荐设备","keywords":"","body":"推荐设备 游戏指的是游戏工程, UnrealEngine. 注意这些是给办公推荐的,不是打游戏推荐的. 手机 推荐: 苹果,小米 安卓系统, PDD删视频的事件大家都记得吧,不记得就去B站搜. 苹果是真的牛逼,可惜是国外的,他胆敢为了用户和美国政府叫板. 试试偷偷的和他们的管理层打好关系,谈对象,让他们感受中华文化的熏陶,顺便\"学习\"一些先进的技术,邀请他们加入. 苹果: 续航高,不需要担心恶意软件和隐私泄露. 小米: 性价比高,隐私保护强. MIUI 12+ 为了逼迫国内厂商改善软件开发环境,尽可能的购买小米和苹果 至于华为/鸿蒙 他们似乎并没有相关的保护,而且我也没用过,因此不做推荐. 我是程序猿,因此隐私保护是我的重点考察对象,性能? 外观? 与我无干,我只考虑实用. PDD删视频 对付这种欺负我们的企业,最好的方法就是告诉大家,我被欺负了,然后一起不购买他的东西,饿死他们. 要一群人一起拒绝购买他的服务,一个人是没意义的 只要一次犯错,就不要给他机会,让他知道商业的残酷,提高服务质量 他也可以选择换一个名字/法人 重出江湖,不过他绝对会失去之前的名气和社会信用,也搞不出什么大东西 如果是在垄断状态下,这样可以为竞争企业的诞生提供土壤,间接解决垄断导致的服务不好的问题. 一个好的企业家在犯错的时候,是会得到职工的保护的,因此如果你的老板对你好,他犯错了,一定要保护好他 怎么让职工保护你的提示: 人类是不会在乎你以前对他多好,只会在乎过去和现在 笔记本 不要购买游戏本,你还不如去购买台式机. 如果轻度娱乐,比如说CSGO,英雄联盟,我的世界,建议15寸以上. 买电脑,上bing,搜bilibili,找AS极客 联想 高端办公: Thinkpad X1系列 他们有专属服务,有什么问题一个电话解决. X1 Extreme,有一些鸡肋,请谨慎选择. 但是其还是非常好装逼的 软件工程师: Thinkpad T系列 刚刚好,就是刚刚好,身边人都这么说. 渲染/游戏/视频: Thinkpad P系列 P系列 苹果 前端/后端: MacBook 任意 M系芯片 游戏/视频/渲染: MacBook Pro 16寸 学生党推荐: MacBook Pro 16 2017/2018 二手 台式机 无脑锐龙, 苏妈万岁!!! AS极客,或者其他装机视频博主. 装饰 如果你经常去开发者大会 服饰 素色T-Shirt 红韩服饰旗舰店 或 POLO衫 领带 10元左右,就可以弄到见太阳发光的 领导就是一条布,10元已经算很多了 不要太过正式,咱们是程序猿,越休闲越\"自闭\"等级越高 自闭指的是,由于太过聪明,对其他人的不屑的气质 黑客其实都挺内向的,指的是穿着 如果具有领导的气质,那就更好了的,外向而且具有领导能力=Great 硬件 苹果笔记本 不信你就去看看Unity ECS技术的直播. 基本上用的都是苹果 不要贴膜,显得很Low,除非你是女的. 黑苹果笔记本也是一个不错的装逼选择 软件 Jetbrain产品, 超级推荐 VSCode VIM 不常见,但是很牛逼的样子, 你可以试试 Runoob有教程 不要用Eclipse和VS和XCode 给人一种Low的感觉 软件的外观一定要有艺术感,如果实在不知道怎么弄去B站搜视频(我忘记UP名字了),或者安装外观插件 不要用默认外观,会显得很Low!!!!! 比如说半透明设计就非常Nice 必须存一个KailLinux子系统,装逼必备 知乎 内裤 内裤非常重要 选 莫代尔面料的 穿上它,你可以安安心心的写一天代码 眼镜 最好带一个眼镜, 方便增加颜值,和泡妹子 身体 锻炼和撸铁, 咱们不需要健身房那样子锻炼 稍微有一点肌肉的性状就可以了. 当然,如果你能够弄到健身房那样就更好了 用途: 吸引妹子 作为社会分类中,智商最高的一类人类, 强健的体魄更会锦上添花. 社会简单分类 律师: 学者系 很乐于助人, 其实行政系的都很乐于助人 医生: 学者系 道德高 尤其是心理医生,是最德高望重的 随便一个人什么事情谈恋爱,还是离婚,还是忧郁,都会找他 不德高望重,其他人会去找他吗? 是每一个人的朋友. 程序: 学者系 其实很多美德都是写入基因的,真的细分的话,每一个人都有 需要注意正态分布, 少数是存在的,但是对一个描述的描述是众数的品格 Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"UI/常见组件.html":{"url":"UI/常见组件.html","title":"常见组件","keywords":"","body":"指南-UI-常见组件 https://blog.csdn.net/lei_7103/article/details/103524196 编辑器(Editor) DetailsView https://blog.csdn.net/qq_29523119/article/details/99691712 SinglePropertyView https://docs.unrealengine.com/en-US/API/Editor/UMGEditor/Components/USinglePropertyView/index.html 输入(Input) ComboBox https://blog.csdn.net/lei_7103/article/details/103524196 EditableText https://blog.csdn.net/lei_7103/article/details/103457882 SpinBox https://blog.csdn.net/lei_7103/article/details/103524405 TextBox https://www.cnblogs.com/timy/p/10299701.html 列表(List) Tree View树形结构 https://blog.csdn.net/lei_7103/article/details/103425155 Tile View https://blog.csdn.net/lei_7103/article/details/103409655 ListView https://blog.csdn.net/lei_7103/article/details/103407865 常用(Common) Border https://blog.csdn.net/lei_7103/article/details/103462207 Button https://blog.csdn.net/lei_7103/article/details/103462636 Check Box https://blog.csdn.net/lei_7103/article/details/103479768 Image https://blog.csdn.net/lei_7103/article/details/103497107 Named Slot https://blog.csdn.net/lei_7103/article/details/103509854 ProgressBar https://www.cnblogs.com/timy/p/10312067.html RichTextBlock https://blog.csdn.net/lei_7103/article/details/103460447 Slider https://blog.csdn.net/lei_7103/article/details/103511552 Text https://blog.csdn.net/lei_7103/article/details/103455535 杂项(Misc) Expandable Area https://blog.csdn.net/lei_7103/article/details/103521863 优化(Optimization) Invalidation Box https://blog.csdn.net/weixin_30569001/article/details/98531161 Retainer Box https://blog.csdn.net/weixin_30567225/article/details/98531072 面板,画板(Panel) Canvas Panel https://blog.csdn.net/lei_7103/article/details/103251558 Grid Panel https://blog.csdn.net/lei_7103/article/details/103347817 ?Horizontal Box Overlay https://blog.csdn.net/lei_7103/article/details/103325163 Safe Zone https://blog.csdn.net/lei_7103/article/details/103402170 Scale Box https://blog.csdn.net/lei_7103/article/details/103353648 Scroll Box https://blog.csdn.net/lei_7103/article/details/103352858 Size Box https://blog.csdn.net/lei_7103/article/details/103353991 Uniform Grid Panel https://blog.csdn.net/lei_7103/article/details/103326453 ?Vertical Box Widget Switcher https://blog.csdn.net/lei_7103/article/details/103401308 Wrap Box https://blog.csdn.net/lei_7103/article/details/103350076 特效 Special Effect Background Blur https://blog.csdn.net/lei_7103/article/details/103562688 Synch Synth 2Dslider Synth Knob Primitive Circular Throbber https://blog.csdn.net/lei_7103/article/details/103526010 Menu Anchor https://blog.csdn.net/lei_7103/article/details/103526212 Native Widget Host https://blog.csdn.net/lei_7103/article/details/103558898 Native Widget Host https://blog.csdn.net/lei_7103/article/details/103558898 Spacer https://blog.csdn.net/lei_7103/article/details/103559609 Throbber https://blog.csdn.net/lei_7103/article/details/103560093 其他(Uncategorized) Dynamic Entry Box https://blog.csdn.net/lei_7103/article/details/103427218 Input Key selector https://blog.csdn.net/lei_7103/article/details/103563198 Window Title Bar Area https://blog.csdn.net/lei_7103/article/details/103563786 Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"UI/命名与切图.html":{"url":"UI/命名与切图.html","title":"命名与切图","keywords":"","body":"命名与切图 https://www.jianshu.com/p/a254630afd65 https://blog.csdn.net/zhangqi323/article/details/52368931 UI命名 UI的命名 只能使用英文大小写，数字和下划线命名，禁止出现空格，文中，括号等其他符号 类型_模块_子模块_变种 进行命名. \\\\\\\\\\ 一般来说 Module对应的是WidgetBluePrint. 你这个UI的名字叫什么,那么与这个所属的切图的Model就是什么 SubModule对应的是你这个UI中\"Panel(面板)\"类型控件 比如说我们做了一个qq界面,命名为 WBP_Login 那么我们的UI名字就是 UI_Login\\_\\_\\_\\_\\ 比如说QQ,我们可以分成以下几个区域 Banner(横幅) Setting(登陆设置) LoginField(登陆方式,账号和密码) 这几个区域均属于不同的\"面板\" 那么横幅 就是 UI_Login_bn_Banner 我是UI资源,我属于Login这个UI蓝图, 我是bn(横幅类型),我在Banner模块(Panel) 登陆控件的Banner模块的,没有名字与变种的横幅 我们的QQ登陆 就是 UI_Login_Bnt_LoginField_QQ 命名的细化 软件中的Icon(图标)其实是图片(Image)的一种,你的头像(Avatar)其实是图标(Icon的一种) 比如说你在设计背包的时候 这个槽(Solt)与头像(Avatar)一样,可以从图标(Icon)中独立出来 只要一类图片,拥有特定的用处,那么你就可以弄一份特定的\"类型\" 类型对照表 \\ 缩写 全名 参考 按钮 Bnt_ button 背景 Bg_ background 桌面背景 王者荣耀背景 图标 Icon_ icon 图片 Img_ image 不知道干啥的图标 头像 av_ avatar 你的QQ头像 进度条 pb_ processabr 打开王者荣耀时候的进度条 横幅 bn_ banner 你平常上网,看到的\"滚动\"的图片 变种与参数 按钮 按钮_悬浮 bnt_xxx_h hovering 鼠标悬停,鼠标放上去的样子 按钮_按下 bnt_Xxx_p pressed 按钮按下,按下时候的样子 按钮_默认 bnt_xxx_d default 默认状态下 按钮_未启用 bnt_xxx_d disabled 按钮未启用,平常用户协议未同意,按钮的样子 进度条 进度条_框框 pb_xxx_o outline 框框 进度条_填充 pb_xxx_f fill 填充 UI切图 切图的目的 切图的目的是把你画出来的设计稿,切成一个一个部分,然后交给前端开发人员组合起来. 比如说Mico设计的 被我们拆成了(不要问我为什么就这么一点点,因为没画完呢) 比如说这个背景,是连成一块的, 你就可以直接把背景挖一块出来 这个人,有6个都是重复的,你就切一个就可以了 怎么切 ui切图很简单: 原样的设计图 把你的每一个图层写下来,大小按照原来的大小就可以了. 有透明通道的以png保存,没有的以jpg保存,一般背景都是不透明的 注意: 如果有\"重复\"的,或者说纯色块,只需要写一点点就可以了 纯色块 平铺图案 可缩小的图片 Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"反作弊/入门版.html":{"url":"反作弊/入门版.html","title":"入门版","keywords":"","body":"作弊与反作弊系统 by vis2k 翻译By J&W 以及本人的学徒 本文由Mirror的作者进行编纂,吾只负责进行校队. 本人的学徒仅仅使用机翻,使用谷歌翻译进行翻译,仅此而已,如有异议,自行翻译则能够得到和他完全一样的版本,并没有使用任何的专业术语进行润色,为了避免后续争端,写这句话. 我的贡献: 95% 他的贡献: 5% 把文字复制下来并使用谷歌翻译 权限: Authority 介绍 ​ 追溯到2009-2015年，在我开始制作《Mirror & uMMORPG》之前，我尝试着通过逆向工程去了解MMOs并通过出售挂机外挂谋生。在此，我将分享一些基于我们的分歧中所提出的问题所总结的一些经验。此外，这篇文章是不完善的，我将通过一个简短的介绍来说明在我们讨论的分歧中，最常提及的话题。当然，如果你想知道更多信息，请联系我。 ​ 首先我们将了解Server-Authority和客户端权限，这是我们首先要解决的问题。我们还将讨论独立于权限的攻击以及如何防范它们。 ​ 经验之谈，永远不要相信Client. Server-Authority vs ClientAuthority ​ 最重要的事，在默认情况下，Mirror是由Server进行逻辑处理的。换句话说，Server做出所有逻辑处理。 外挂开发者通常入侵客户端来开挂。在这种情况下， ​ 换句话说，只要在有人入侵你的Server之前改用Server-Authority，将不会存在问题。如果你在游戏的某些部分(如移动)中使用了Client-Authority，那么这些就是你需要担心的部分。 ​ 明确一点，使用生命药水解释两种Authority之间的区别。 Server-Authority Client-Authority 玩家：我可以使用这瓶药水吗？ 玩家：我使用这种药剂，我的生命值将回复至100！ Server：验证中······ Server：¯\\(ツ)/¯ Server:你的新生命值是100! | | ​ 在实践中，您需要效验[Commands]中的任何变量。以下是一个开发者开发一款由Mirror制作的游戏的视频，其中开发者没有核实客户端数值输入。游戏可能有如下的CmdSellltem功能: [Command void CmdSellItem(int slot, int amount) { // get player's item at inventory slot Item item = player.inventory[slot]; // sell to npc item.amount -= amount; player.gold += item.price * amount; } ​ 请注意我们是如何盲目地相信玩家发送的数据。这里没有做任何校验。如果玩家只有一个道具，但黑客发送‘amount= 100’，Server任会按照100个道具进行出售处理。相反，我们需要验证任何玩家的输入: [Command void CmdSellItem(int slot, int amount) { // valid slot? if (0 ClientAuthority——万恶之源 让Client进行移动的逻辑 ​ 如果默认情况下Mirror是完全使用Server-Authority的，而Client-Authority允许作弊，那么为什么还会有人使用Client-Authority呢? ​ 因为它很简单。许多游戏一开始或一直使用Client-Authority进行移动。在Server-Authority中，Client必须在每次操作之前询问Server 按下按钮,询问服务器是否可以按, 服务器说可, 移动, 然后再把数值返回 因此现在的游戏使用的都是类似Minecraft的, 客户端和服务器同时进行计算, 服务器检测数值,如果数值超出,则使用服务器自己计算的数值进行同步/覆盖. ​ 在Client-Authority模式下，玩家一按下该键就会移动。它不是要求Server进行移动的逻辑处理，而是告诉Server它移动了,让Server告诉其他连接的客户端。这很不错,但是 Client可以随时设置Transform的数值 ​ 多人游戏的移动的设计很难,不过UE4和DOTS技术早就解决了. 。快速移动也可能是Server-Authority的(rubberbanding / prediction /etc.)，但为了节省几个月的开发时间,许多人一开始选择不这么做. 相信来自Client的数值 ​ 在有些游戏类型，比如第一人称射击游戏中，不可避免地要把游戏的某些部分交给客户。比如瞄准这个部分,即(yaw,pitch,roll)。但只要我们信任来自客户端的数值，黑客就可以通过修改这些数值来作弊。在FPS游戏中，自瞄辅助可以假装将鼠标更快地移动到另一个玩家身上的操作。而且由于Server直接采用Client的数值，这就为自瞄作弊,开了一条小路。 总而言之，我们可能希望或需要在游戏的某些部分上信任客户。这些是我们需要防止作弊的部分。 黑客可以抓包和改包. Server授权“作弊” ​ 需要明确的是，即使是像MMOs这样100%Server-Authority的游戏，仍然存在可攻击的向量。本文的重点是首先考虑对Client-Authority的最明显的攻击。即使Server不相信客户端，从技术上讲，除了自动执行和玩家手动执行的任务外，技术上不作弊的机器人任有空间。 ​ 机器人是一种分析游戏状态并在玩家不在时自动获取金币或杀死怪物的工具。有些玩家甚至会使用数百个机器人去农场，然后用游戏中的金币去换取真钱。 记住，Server-Authority相关的作弊是一个奢侈的问题。如果你的MMO大获成功，以至于人们开始开发挂机辅助，那么你已经算是非常成功了。 ​ 防止Server-Authority相关的“作弊”已经不是单纯的开发可以解决了。机器人的作用,只能用于挂机自动搜集,不会造成很大的伤害。 ​ 需要说明的是，在客户端和Server端都可以检测到机器人。但是当问题出现的时候要担心5年后，而不是现在。 作弊是如何产生的 ​ 让我们快速了解一下作弊是如何发生的。 ​ 你的游戏在内存中存储了大量相关信息。例如:本地玩家的位置，其他玩家的位置，怪物的位置，生命值，名字等等。 发现内存位置 ​ 大多数作弊者需要从游戏内存中读取一些信息。像Cheat Engine这样的工具可以让你在游戏内存中搜索特定的值。例如，如果您的健康值为100，那么您搜索“100”，可能会在内存中找到10,000个值为“100”的位置。但如果你服用药剂并将生命值增加到200，那么你便可以将其缩小到之前的“100”，现在则改为“200”。如果这样做几次，那么通常可以将其缩小到内存中的一个位置。例如，本地播放器的运行状况可能存储在内存地址0xAABBCCDD。 ​ 但这里存在一个问题:当我们下次开始游戏时，游戏将再次设置世界，而玩家的生命值将不再位于相同的内存地址。像Cheat Engine这样的工具可以让你通过设置断点来“找到访问那个内存位置的东西”。再次使用药剂，断点就会触发，现在你就知道游戏的哪个部分会访问那个内存位置。 ​ 而不仅仅是血量,你现在有一个生命值为health的玩家(这是一个简化，在实践中，你从0xAABBCCDD到一个带有偏移量的指针，如[0x00FF00FF+0x8]，其中0x00FF00FF是你的玩家对象在内存中的位置),0x8是玩家->生命值的偏移量。很可能玩家的>法力值会达到+0x12,或者在内存的下一个位置。这个过程可以重复，直到你有游戏->玩家->生命值，游戏最终是一个相对于程序入口点的地址。 ​ 换句话说，我们现在甚至可以在重新开始游戏后读取玩家的命值。 ​ 这个过程可以在库存、技能、怪物、位置等方面重复。我们能找到的信息越多，就越容易开发作弊程序。 ​ 如果我们的游戏使用客户端权限，那么我们就可以在内存中修改玩家的生命值!如果我们使用Server-Authority，那么我们仍然可以在内存中修改它，但是修改只在这个Client上可见。Server不将运行状况信任给客户端，下次将新的运行状况同步到客户端时，内存中的值将再次被覆盖。 这就是Mirror的[SyncVar]的工作原理!您可以在Cheat Engine中修改它们，但没有人关心，因为它们是Server授权的。 让查找内存位置更加困难 ​ 通过指针和偏移量查找内存位置的过程很麻烦。每当游戏发生变化，补偿也会发生变化。例如，如果之前我们有像： class Player { int Level; // at +0 in memory int Health; // at +4 in memory int Mana; // at +8 in memory } ​ 游戏改为: ````class Player { int Class; // at +0 in memory int Level; // NOW at +4 in memory int Health; // NOW at +8 in memory int Mana; // NOW at +12 in memory } ​ 然后，欺骗开发人员将不得不再次手动搜索内存中的所有偏移量。这个处理过程会有点让人痛苦。 > 偶尔打乱内存布局是使逆向工程更加困难的好方法。防止逆向工程是**回报与努力**的函数。如果黑客每个月只能赚10美元，没人会每天花10个小时去做逆向工程。我们做得越难，就越不值得。 > **保护内存值** ​ 这里有一个有趣的小技巧，可以在任何游戏中使用，没有太多风险。与其直接存储游戏中的数值，**我们可以存储如下的预期值**: ````struct AntiCheatInt { int projected; public int Value { get => projected + 1; set => projected = value - 1; } } ​ 这是一个简化的示例，但其逻辑是是不要将我们的“100”生命值直接存储在内存中。相反，我们存储被一个或更复杂的投影修改过的值。这已经使得整个作弊引擎的初始查找过程非常令人沮丧，同时几乎没有增加任何风险。如果你在Unity中这么做，就不会出现任何问题。 > 映射内存值是一种容易使作弊开发变得更加恼人的方法。注意，这对性能有轻微的影响，并且只有在Unity中使用`IL2CPP`时才有用。 > 当保护玩家不受外挂干扰时，他们需要在让作弊者的生活更加艰难和不惹恼诚实玩家之间找到平衡。有些技术，比如```UPX```打包(见下文)，很有可能会惹恼所有人。其他技术，比如投射记忆，惹恼任何人的可能性很低。 **使访问内存变得困难** ​ 有各种各样的技术使逆向工程开始时更加困难。例如: - **动态变化的假入口点(加壳)**，例如使用`UPX封隔器等exe包装`。这些不是很难打开，但它增加了难度。 - - 注意，`UPX`包装的可执行文件经常被标记为病毒。 - 通过````IsDebuggerPresent````检测像````Cheat Engine/MHS````这样的**调试器**。注意，这很容易解决，因为每个人都知道````IsDebuggerPresent arleady````。更高级的技术可能包括一些技巧，比如测量指令之间的时间间隔。例如，如果我们在**运行时用秒表测量**一个简单的整数乘法，它最终会花费几毫秒的时间，那么很可能有人会用调试器逐步执行这段代码。 - 使用像`Themida`或`Enigma Packer`这样的工具进行**虚拟化**是防止逆向工程的宗旨。如果在常规进程中很难找到内存位置，那么在虚拟机内部的进程中更难找到内存位置。当我们使用逆向工程游戏时，我们永远不会触及虚拟过程，因为所付出的努力与回报根本不值得。没有人会花半年时间分析你的虚拟机指令，除非你的游戏像《魔兽世界》那样庞大。 - - 注意，虚拟化的可执行文件通常被标记为病毒。您需要一个没有标记为病毒的自定义虚拟化引擎。 - > **注意**，这些技术在Unity中有很多风险，**Unity**已经从**c# ->IL(->IL2CPP->Assembly)**引入了好几层复杂性。在某个地方，错误的进入点破坏东西的可能性很高。根据经验，在任何情况下都应该使用**IL2CPP**，因为它将游戏从IL更改为Assembly，而这已经很难进行逆向工程了。如果作弊成为一个严重的问题，考虑虚拟化。 > 说实话,你使用Unity基本上源代码就公诸于世了,我不太明白为什么原作者这么说 既然我们已经了解了外挂是如何产生的，我们就来看看一些常见的外挂是如何起作用的，以及如何防范它们。 ## Ollydbg/IDA/Code Caves 假设你的游戏有如下功能: ````void SetHealth(int health) { this.health = health; } 这可能产生(简化的)汇编代码，如: ````... mov edi, eax // edi is this.health, eax is the new value ... 黑客可以使用高级的调试工具修改你的游戏的汇编码，以: mov edi, 100 // always sets health to 100 ... ​ 与使用作弊引擎搜索和修改内存值不同，它可以直接修改游戏自己的汇编代码。 ​ 修改游戏的组件对于开发黑客来说是非常强大的。代码通道通常被用来将定制函数注入游戏中，例如: JMP 4 // jump to our custom code ... mov edi, eax // do the original thing ... custom code ... // do whatever we want JMP 2 // jump back to the original function ... ​ 在C#中，这相当于用户将自己的代码注入到我们的生命值函数中，如下所示: ````void SetHealth(int health) { CodeCave(health); } void CodeCave(int health) { this.health = health; // do all kinds of magic here // for example, if health==0 then call the code // that clicks on the Respawn button to respawn // automatically. } ```` ​ 这是一个简化的例子，但却是一个非常常见的技巧。为了防止自定义程序集，明智的做法是对生成的exe文件的校验(md5,sha256...)。 透视作弊(Wall Hacks / ESP) ​ 在第一人称射击游戏中，涂鸦墙是最常见的作弊方式之一。人们可以修改你的可执行文件，让玩家看到墙后的场景。这很容易做到，也很常见。 ​ 这是防止它的方法： 使逆向工程尽可能困难(见上一章)。 使用Mirror的InterestManager以不显示远处的玩家。如果他们确实被看到的话，你可以执行基于InterestManager的射线检测，地方玩家,才会被发送给客户端。 虚幻4从设计的根本,就解决了这个问题(actor的同步范围) 说白了,服务器认为你看不到这个玩家,或者距离过远,就直接不给你现实,不告诉你客户端玩家在这里. 在运行时检测透视作弊程序并禁止作弊者使用他们。 ​ 这是一个困难的问题，即使是像《反恐精英》这样的热门游戏也很难处理这个问题。这是一场持久战。 攻击速度 ​ 如果你选择使用Client-Authority移动，因为这样更容易，那么你很可能会在你的游戏中遇到Speed-Hack。速度破解可以通过多种方式实现，比如简单地修改玩家。但是像内存的速度，计算机的时钟速度，这在Unity上是很难处理的。 ​ 这是防止它的方法： 在Server上检查移动速度。允许对网络条件有一定的容忍。许多游戏允许10-15%的容忍度，但任何高于这一水平的游戏都可能是一种速度攻击。 检查移动的 包的发送的速度,是否会比一般的快, 10%-15%是在 丢包/卡包 的情况,超过那就是对面网络差,既然网络环境差,那活该被判定作弊 机器人 ​ 如前所述，机器人是特别招人厌烦的，因为他们不需要任何真正的欺骗或利用Client-Authority。此外，如果你周围的人都是机器人，它们可能会破坏你的游戏生态，让玩家觉得游戏毫无乐趣。 ​ 这是防止它的方法： 使寻找内存位置变得困难。参见上面的章节。 偶尔调整一下你的内存布局。在玩家之间添加不必要的值。生命值和玩家。有时法力。 偶尔调整一下你的网络协议。最先进的机器人甚至不需要读取你的内存。它们直接使用游戏的send/recv功能。偶尔修改您的NetworkMessage操作码和布局，您将使逆向工程非常困难。 上面俩点就是经常修改包的id,和内存的位置, 也就是需要频繁的更新,简直搞笑 通过校验和、名称等检测已知的挂机程序的进程。 注意，这通常会将你的游戏标记为病毒。游戏不应该寻找正在运行的进程。 从最简单的形式来看，如果某人连续一周24/7地玩游戏，那么这个人可能是机器人，或者极少数情况下是网吧里的某个家伙。 如果玩家总是在同一地点使用相同的路径或关卡，那么这可能是一个机器人。 在游戏中添加一个举报按钮。调查被举报的玩家。试着和他们谈谈，看他们是否有反应，等等。 在高度活跃的地方放置诱饵怪物。如果某个区域在一段时间内杀死了许多怪物，那就在该区域刷出一个外观明显不同但非常强大的怪物。正常玩家会注意到并暂时转移到其他地方。机器人会撞到它然后死掉。 ​ 同样，这些都是对复杂问题的简化答案。如果你的游戏获得成功，这将是一场持久战。这没什么，只要你知道你在打一场战斗。 沉默,延迟检测 ​ 游戏所犯的最大错误之一是让用户知道何时检测到作弊或逆向工程工具。它所做的只是让逆向工程师知道在代码的哪里查找以便禁用检查。 ​ 如果我们完成了所有检测作弊和调试的工作，我们应该保持沉默，并利用这些信息。与其大声宣布作弊企图，不如悄悄地向Server发送一些信息。标记数据库中的玩家。 ​ 不要立即封禁或踢出任何人。更明智的做法是随机等待一段时间。 用户可能会在一个月内用不同的版本尝试多种作弊方法。 逆向工程师可能会使用不同的工具，以不同的方式修改游戏。 ​ 如果我们一个月只禁一次人，那么导致禁的原因就完全不明显了。这将带来巨大的周转时间让开发者来测试哪些作弊会被发现，哪些不会。 无声侦查是我们战胜作弊者最有力的工具。善用时间和信息。 免费游戏和付费游戏的比较 ​ 下面是我在自己的游戏中可能也会考虑的最后一点。虽然免费游戏能够吸引大量玩家，但如果你只是一个小型独立开发者，还没有准备好应对大量虚假账户和黑客，那么付费游戏也有其价值。 ​ 玩家必须一次性付费才能玩你的多人游戏，这给玩家带来了一个巨大的障碍，即黑客和作弊者如果被禁，就必须再次购买你的游戏。此外，它还添加了某种程度的验证，以确保人们不会只是反复创建帐户。如果需要的话，你可以禁止使用信用卡等。 总结 ​ 总而言之，作弊是一个复杂的话题，永远不会有最终的解决方案。在我看来，你所能服务的一切都是权威的。对于移动，至少要让它在某些时候具有Server-Authority，例如在游戏发布后，当你开始看到第一个速度攻击，或者当你有一些喘息的空间时。 ​ 一旦你的游戏获得成功，可能就会有人参与战斗。你可以做很多事来增加难度。 ​ 最终，这是努力与奖励的结果。你越是让作弊变得烦人，人们就越有可能不去打扰你，或者干脆转向更容易的目标。 ​ 这个主题可以写一整本书，但我希望你从中学到一些基础知识。 Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"反作弊/精简版.html":{"url":"反作弊/精简版.html","title":"总监版","keywords":"","body":"作弊与反作弊 原作者 vis2k, Unity最好用的网络引擎Mirror的开发作者 原文地址: https://mirror-networking.gitbook.io/docs/guides/cheating 本文仅摘取重要的部分进行讲解,其他的部分请自行翻阅原文,或者添加进入IndieClub直接询问本人 任何程序方面的问题均可询问,只要不是太基础. 精品作者推荐: Neil Wang, 英雄互娱技术总监 https://dawnarc.com 介绍 (Introduction) 作者在2009与2015年一直沉迷于制作MMO类游戏,并以制作相关辅助软件为生. 本文原作者并未制作完成. 服务器权限于客户端权限. 一般来说,服务器负责所有的逻辑处理,而客户端只需要同步数值就可以了. 在Mirror中 [Command]代表着 客户端调用服务器端执行, [ClientRpc]代表着 服务器调用客户端执行 详见创乐坊,我编纂的Mirror入门 数值溢出 本段代码,客户端调用后, 服务器即出售对应的slot的对应的物品. 需要注意的是,如果辅助制作者恶意发包, 这个slot和amount可以为任何数值. [Command] void CmdSellItem(int slot, int amount) { // get player's item at inventory slot Item item = player.inventory[slot]; // sell to npc item.amount -= amount; player.gold += item.price * amount; } 所以对客户端数值校验是非常重要的事情 [Command] void CmdSellItem(int slot, int amount) { // valid slot? if (0 客户端权限 客户端权限就比较简单了, 比如说,每帧检测一次WASD的输入,如果有数值就控制玩家移动. 问题是,这个权限是给客户端的,他可以想怎么调用 MyVeryBuggyMove 就怎么调用 一般我在进行程序编纂的时候,仅仅同步客户端的输入,所有逻辑都交由服务器处理. 但是这样子会导致计算量过大,运营成本过高. 请开发者们自行根据 开发的难度,以及\"反作弊\"的必要性,自行选择. class AMyPlayer: NetworkBehavior{ float speed=0.02; void OnUpdate(float deltaTime){ if(IsServer){ return; } var direction=new Vector3(Input.GetAxis(\"Horizontal\"),0,Input.GetAxis(\"Vertical\")).magnitude*speed*deltaTime; this.MyVeryBuggyMove(direction); } [Command] public void MyVeryBuggyMove(Vector3 direction){ this.getComponent().SimpleMove(direction); } } 辅助软件是怎么制作的 内存修改 VE,CE 这类内存修改软件, 能够修改进程中的所有内存的数值. 比如说你的生命数值是100,你只需要搜索100这个数值,他就会找到数值为100的地址. 你故意被怪物打一下, 剩下90血, 再在其中搜索90血的地址,最终可以找到准确的地址. 缺点就是,每次程序重新运行,所有地址都会重新设定. 其实你只需要把变量设置为 同步服务器的 就可以了 地址混淆 防御方法很简单, 就是修改一下内存的地址, 不过这种方法很容易被破防 从 class Player{ int level; +0 int health; +4 int mana; +8 } 改成 class Player{ int Class; +0 int level; +4 int health; +8 int mana; +12 } 数值混淆 这种情况, 您的生命是100点的时候,内存中会是99点, 黑客就无法搜索到准确的内存了 struct AntiCheatInt { int projected; public int Value { get => projected + 1; set => projected = value - 1; } } 关于单机游戏需要注意的一点 (如果您Unity中大部分场景的物体是动态的,则不太需要担心这个问题.) 咱们也可以不直接搜Health这个变量,在下面这个类中, Health的地址,是Player的内存地址+0x4的偏移,Mana则是Player+0x8的偏移 本人没有学过内存相关的知识,也就是某人写的垃圾的C教程, 这方面的,请自行查阅所使用编程语言的内存管理. class Player: MonoBehavior{ float Health; float Mana; } 我们现在,有一个世界的类, 比如说玩家是固定在 items的第 n个位置, 那么玩家的内存地址则是 固定 items*+nx4 剩下的懂的都懂. 这样子只需要查到世界的类的内存,就可以了. 同理,如果World是固定位于 游戏本体的某个位置,那么自动就可以查找到所有内存地址. class World{ List items; } 其他方法 使用UPX等加壳,对入口点进行混淆(虽然现在自动脱壳技术已经成熟,不过对小白黑客还是很有防范作用的) 检测作弊程序的进程, 比如说 VAC, TP THEMIDA与Enigma Packer等混淆加壳软件, 不过底层逻辑和方法1一样, 但是原作者写了 需要注意的是, Unity使用的是 C#->LR->Assembly,而不是使用C++直接汇编,导致很容易进行反编译. 原作者在这里写了,由于入口点被打乱重铸, 所以很难, 这里我就不太理解了. 按理来说,是跟容易反编译出源代码的. 代码窟 一般在游戏中,函数是这样子的 void SetHealth(int health){ this.health=Health } 转化为Assembly就是 mov edi, eax // edi is this.health, eax is the new value 用吾爱破解这些的,可以直接把eax改成固定的数值. mov edi, 100 使用代码窟的情况 c# void SetHealth(int health) { CodeCave(health); } void CodeCave(int health) { this.health = health; // do all kinds of magic here // for example, if health==0 then call the code // that clicks on the Respawn button to respawn // automatically. } Assembly JMP 4 // jump to our custom code mov edi, eax // do the original thing JMP 2 // jump back to the original function 透视外挂,Z-Bush,ESP 方法就只有一个, 服务器检测玩家是否能够看到物体,看不到就直接不告诉服务器那边有. 比如说英雄联盟 变速齿轮 加速进程的时钟(tick) 只有校检包的数量是否在准确的范围内 机器人/按键精灵 这个不需要从程序方面解决. 比如说挂机一段时间,弹出验证码, 得从设计上解决 沉默的检测 如果你试图 破解一个软件, 软件会在你破解的时候,告诉你检测破解的方法,那还防御个屁. 看看VAC吧. 增加违约成本 购买游戏100元,开挂直接封. Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"项目管理/Commit规范.html":{"url":"项目管理/Commit规范.html","title":"Commit规范","keywords":"","body":"Commit管理 本文基于Git进行团队协作 不久的以后,我们将会迁移至PlasticSCM 需要注意的是,模块由每一次项目,重新设立 模块划分(scope) Commit规范 Commit分为 Header 简单的描述 Body 具体的描述 Footer 任务完成情况 Markdown \\(\\): \\ // 空一行 \\ // 空一行 \\ feat(interact): 完成了互交模块 1. 完成了InteractZone的编写 2. 完成了对玩家模块的接接入 Header \\(\\): \\ 类型 feat 完成了模块的新功能 我开始进行一个新的模块制作,那么第一个push必定是feat 比如说\"驱逐模块\", feat(exile): 完成了驱逐模块 后续该模块的功能,采用feat(exile.某功能). fix 修复bug, 你自己发现的,QA发现的 由于bug一般是通过\"Issue\"进行管理的,因此后面一般添加的是issue的 id docs 文档修改 在PlasticScm中,我们把文档放置在对应的目录下 Style 不影响代码运作,但是把代码整的更好看 Bash bool a=true; bool IsATrue(){ return a; } bool isbtrue(){ return b } bool b=true 修改为 Bash bool a=true; bool b=true; bool IsATrue(){ return a; } bool IsBTrue(){ return b } 或者说 Bash bool a=true; bool b=true; bool c=true; bool isbtrue(){ return b; } if(a){ }else{ if(b){}else if(!c){} } 修改为 Bash if(a){} if(a&&b){} if(a&&b&&!c){} bool IsBTrue(){ return b; } refactor 你改了一些东西,不算新功能,也不算Bug修复,那么就是refactor. 比如说你完成了玩家状态机, 后面如果是添加一个新的状态机,那么得用feat. 但是如果是把旧的状态机,做修改,来支持新的东西,那么旧用refactor,但是还没有新的东西接入 Perf 性能相关的改动 Test test 新增测试 由于本人对测试方面不是很了解,古不多做描述 Meta(UnityOnly) 针对Unity中的.meta文件的改动. Chore 非代码的变动,比如说构建工具这类的. 比如说你往项目里面加了一个初始化项目的init_project.sh 只要不是东代码的都可以归类这里来 Art 美术类资产的增减 Body body则是描述你干了些什么.过于抽象,因此不做描述 Footer 不兼容改动 如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法 Bash fix(interact): 修复互交区域无法显示的bug 1. 出错位置位于 当玩家离线的时候,没有关闭占用 BREAKING CHANGE - 你改了什么 其他人由于你把这个改后怎么使用 关闭Issue 如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue (可依次关闭过个issueCloses #123, #245, #992) Revert 还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header 其实就是在commit的header前面添加 \"revert:\" Bash revert: type(scope): abcwda 回滚commit bfe307ce57d87677c6c473c228e6c2ed8b81dcec. Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"项目管理/插件管理.html":{"url":"项目管理/插件管理.html","title":"插件管理","keywords":"","body":"制作MMO类游戏的时候,尽可能的把所有东西,变成一个一个插件,参考MineCraft的spigot/bukkit 服务器 用其他插件的时候,记得把插件丢到统一的文件夹,并使用插件中的每一个特性制作Demo确保程序猿会用 Vivox的教程,就非常不错, 而且一次制作,终身使用,以后我们会有一个巨大的插件百科 Vivox Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"项目管理/工时管理.html":{"url":"项目管理/工时管理.html","title":"工时管理","keywords":"","body":"规范-项目-难度与工时 工时管理,是根据你们自己的项目,做过的某些东西,觉得的有多难,然后记一下写的时间. 有时间测一测不同职级的人做这个东西有多难 以后我们会弄一个全国统一的,不过得等老长时间 程序 参考 难度 互交区域 lv1 文档 职业级别 难度 参考工时 是否设计过 研发文档 lv0 lv1 6h 否 研发文档 lv2 lv1 3h 否 研发文档 lv2 lv1 20min 是 建模 难度 画风 例子 描述 lv2 多边形 lv0 多边形 小瓶子,小石块 模块 职级 时长 难度 贴图 lv2 模型 策划 系统: 比如说物品系统, 玩家手持的时候左键会怎么样,右键会怎么样 资产: 比如说物品中的武器, 这个武器有一个打人的动画 模块 职业级 时长 难度 系统 lv0 3h 资产 lv1 1h 项目管理 Excel 30分钟 500条 1条 1分钟 2D 图标 lv1 30h 界面 lv1 3h 原画 Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"项目管理/人事评级.html":{"url":"项目管理/人事评级.html","title":"人事评级","keywords":"","body":"人事评级 😕这个文档我还没写完呢，你们就先看着吧， 职级和技能等级可以直接用了 评分标准-时间: 1年~3年: 0.15 3个月~1年: 0.65 近期3个月内: 0.25 评分标准-职业: 相关职业 : 0.5 策划对动画 动画对建模 同行: 0.3 动画对动画 上级: 0.2 动画总监对动画师 总监权限(WIP) 这个比较复杂,总监你只需要按照规范进行评分,你就可以是总监.主要是以见识而不是能力 对程序: 你见过的框架 对建模: 你能够掌握的画风 职业级 评级条件: 相关技能总监权限 同级 lv0 (实习生) 以此行业为专业,但是没有相关工作经验 或者 拥有3个月的工作经验,但是没有此行业相关知识 lv1 能够完成自己职业内的部分 工作1年左右 例子: 比如说模型有贴图,骨骼,模型,动画,你只可以完成其中的几个部分 lv2 能够很好的完成本行业的工作,在没有其他人的指导下 工作了3年 例子: 比如说 你一个人能够完成 建模,贴图,模型,动画非常完美的完成 lv3 对行业的知识滚瓜烂熟,能够教其他人怎么工作 工作了5年 例子: 精通3d,同时运营,程序,策划等相关技能 达到lv2等级 是技能不是职业 lv4 行业大牛,在对自己行业熟识的情况下,同时对其他相关行业有所了解 备注: 其实lv3就封顶了,lv4很难判定, 可以可以确定的是l 技能评级 评级条件: 拥有该技能方面的总监权限 lv0 没有此技能的基础知识,刚刚接触1个星期, 什么工作都做不了 lv1 接触了技能1个月左右,能够进行基础的工作 或者以此技能为专业 lv2 接触了3个月左右,能够熟练的使用 或者此技能获得过奖项 或者参与过这方面的工作 lv3 1年以内, 很熟练, 对相关的工作都比较里了解,相关技能等级 lv2>?>lv1 lv4 lv3已经封顶,lv4就是技能创建者了,准确的说是\"子技能创建\",比如说程序中的模式 人员类型(WIP) 外包: 你把需要的东西给我弄好,我一次性整,只干这件事情,其他事情和我无关 很高兴和你合作,你把东西弄好,我给你钱 打工人: 我只你安排给我我的事情,并把事情干好,你说事情我做 我尊重你的权益,同时愿意提升你的职业级, 但是关于公司未来,你没有权力决定 合伙人: 愿意少拿工资,购买公司的股票,给公司提出建议 很高兴您与我们一起共事,也很高兴您将公司作为一份不错的理财产品, 很明治的选择, 享受生活吧 投票权: 10% 管理者: 我负责将我小队的事情处理好, 任务: 你说我做 享受生活,谁不喜欢呢,您能够处理好分内的事情,是非常不错的 当然,你也有权力进行投票,毕竟您的工作是维持内部的稳定 投票权: 40% 领导者: 我的目的是将团队做好,实现我们一起的目标 你好,公司就是你家,请带领我们赚更多的钱还算赚更多的名气,您说了算! 董事权: 50% Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"项目管理/Bug排查.html":{"url":"项目管理/Bug排查.html","title":"Bug排查","keywords":"","body":"指南-程序-Bug排查 Made By: 张瀚林 导师: J&W 引擎: Unity 当写程序遇到bug时应该这样做 一.检查代码逻辑是否正确 1.根据需求列出需要变量以及方法 2.查看自己代码是否都定义了以上变量和方法 3.设计算法：将写好的代码描述成一句句话，看话的意思是否是需求的意思，是否有遗漏和欠缺的地方 4.查漏补缺（没有则跳过进行下一步） 其实就是检查系统策划的逻辑 二.若逻辑正确检查所有使用的变量是否正确。 检查每次使用的变量是否是所需要的变量，因为同时定义相同类型的变量不止一个，可能所指代的游戏物体不同，要注意变量的引用。如：一个程序中定义了一个预制体gb_pb和一个用预制体实例化出来的游戏物体gb，要对实例化出来的游戏物体进行操作要使用gb.而不是gb_pb. 有一个命名规范很重要好的代码 三.根据问题进行测试，如：使用断点、直接Debug.Log、游戏运行时直接在Inspector面板手动修改数值等。 1.通过Debug.Log可以直观地从控制台查看代码是否执行到这里，随着游戏状态的改变动态查看一些数值的变化，如：Debug.Log(\"GameObject的位置：\" + gameObject.transform)。 2.游戏运行时，在Inspector面板中直接改变你想改变的数值，查看游戏物体是否按照想要的方式来运动，从而判断是代码赋值的问题，还是代码逻辑写的有问题。 3.Rider的使用断点 四.还没有问题，检查是否有其他脚本干扰。 1.将自己写的脚本放到一个独立的命名空间，调用方法的时候可以防止调用其他的命名空间中的方法。 2.查看本游戏物体所挂载的其他脚本，以及其他游戏组件上挂载的可以影响本游戏物体的脚本。 尽可能的使用Getter与Setter,切忌直接修改数值, 在小项目中无伤大雅,我们这些东西全部都是为了大项目准备的五.以上都没有问题，重新检查每个函数的实现，以及函数文档，重新检查逻辑上存在的漏洞 从步骤一开始重复 Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"项目管理/资产管理.html":{"url":"项目管理/资产管理.html","title":"资产管理","keywords":"","body":"资产管理 指南-资产与机制-程序 责任归属 其实特效,就是会编程的数学特别好的美术 基础资产 蓝图 BluePrint UE4工程师 程序 动作/动画 Animation 3d动画师 建模 AI AI AI设计师 程序 材质 Material 特效师 特效 其实建模,特效,程序都会 纹理 Texture 贴图 paper2d Paper2d 2d动画 动画 UI Widget 前端 程序 音乐 SoundWave 音效师/乐师 音乐 特效 ParticleSystem 特效师 特效 着色器 Shader 特效师 特效 灯光 Light 特效 自定义资产 找策划去. 分类方法 所有名字用英文命名 我们将分类分为以下几类 特性分类 特征分类,一般是会复用的资产,比如说FontAwsome,一次制作多次使用, 用于美术库 模块分类 你是属于哪一个\"机制\"的,你就在哪儿. 用途分类 那个地方用到你,你就在哪儿. 模块分类与用途分类的差别在于 模块分类 只分类到哪一个机制, 比如说 信标模块, 就存到/Beacon/ 用途分类 则细分到哪一个资产, 比如说 信标模块的信号弹信标 特征分类 铃铛,圆形 Image/Bell/T_Red_Round.png Image/Round/T_Bell_Red.png 文件夹: Type/SubType/../ 文件名: %prefix%%what%%type%_%subtype% 模块分类 信标模块 信号弹图片 /Beacon/T_SingalBeacon.png 文件夹: Module/ 文件名: %prefix%%what%%subtyple% 用途分类 物品信号弹的略缩图图片 /Item/SignalBomb/T_Thumbnail.png 文件夹: 用到他的地方的蓝图 文件名: %prefix%_%usage% 美术资产 用途分类 给信号塔的信标的图片 /Struct/SignalTower/Beacon.png 机制以及其资产 模块分类 属于结构体机制的信号塔 /Struct/SignalTower 机制资产 用途分类 给\"信号塔\"用的信标 /Struct/SingalTower/BeaconSignalTower: ABeacon 文件夹 均位于 Context目录下 地图 /Context/Level 某个游戏模式下的地图和gamePlay 在对战里为 Context/Level/Lobby/ 大厅 Context/Level/Match/ 比赛 Context/Level/Test/ 测试 GamePlay Context/Level/\\/GamePlay 游戏模式,游戏玩法 Map Context/Level/\\/Map 游戏地图 角色 /Context/Character/ Player Context/Character/Player/ 存放玩家 Npc Context/Character/Npc/ 存放NPC 某个NPC Context/Character/Npc/\\ 存放某个NPC的文件夹 环境 /Context/Environement Astomsphere Context/Environment/Astomsphere/ 盒 Building Context/Environment/Building/ 建筑物 Foliage Context/Environment/Foliage/ 植物 Props Context/Environment/Prop/ 地图中的道具,比如说汽油桶 Landscape Context/Environment/Landscape/ 地形 Liquid Context/Environment/Liquid/ 液体,比如说水 其他 PostProcess Context/PostProcess 后处理 Sound Context/Sound 音乐 Widget Context/Widget UI Vehicle Context/Vehicle 载具 Weapon Context/Weapon 武器 Gadget Context/Gadget 道具 Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"项目管理/资产命名.html":{"url":"项目管理/资产命名.html","title":"资产命名","keywords":"","body":"资产命名 \\,是用于替换的 [某],是在有的情况下,填的,可为空 \\\\[SubModule]\\[Suffix] \\\\[子模块]\\[后缀] 自定义资产前缀 每一个项目的自定义资产都是不一样的,因此这部分比较随意 CH_ 角色 VH_ 车辆 WP_ 武器 AN_ 动物 基础资产前缀 基础 蓝图 BluePrint BP_ 材质 Material M_ 模型 StaticMesh SM_ 骨骼模型 SkeletalMesh SM_ 纹理 Texture T_ 粒子 ParticleSystem PS_ 动画 动画一般为 AM_谁的动画_什么样的动画 比如说玩家持枪 AMCharacter_HoldGun\\\\ 瞄准偏移 Aim Offset AO_ 瞄准偏移 Aim Offset 1D AO_ 动画蓝图 Animation Blueprint ABP_ 动画合成 Animation Composite AC_ 蒙太奇 Animation Montage AM_ 动画序列 Animation Sequence AS_ 混合空间 Blend Space BS_ 混合空间 Blend Space 1D BS1_ 变形目标 Morph Target MT_ 纸质翻页薄 Paper Flipbook PFB_ 装备 Rig R_ 骨架网格体 Skeletal Mesh SKM_ 骨骼 Skeleton SK_ AI(人工智能) AI控制器 AI Controller AIC_ 行为树 Behavior Tree BT_ 黑板 Blackboard BB_ 装饰 Decorator BTD_ 服务 Service BTS_ 任务 Task BTT_ 蓝图 蓝图 Blueprint BP_ 蓝图函数库 Blueprint Function Library BPFL_ 蓝图接口 Blueprint Interface BPI_ 蓝图宏库 Blueprint Macro Library BPML_ 枚举 Enumeration EN_ 结构体 Structure ST_ 控件蓝图 Widget Blueprint WBP_ 材质 材质 Material M_ 后期处理材质 Material (Post Process) PP_ 材质性能 Material Functioni MF_ 材质实例 Material Instance MI_ 材料参数集合 Material Parameter Collection MPC_ 次表面轮廓 Subsurface Profile SP_ 物理材质 Physical Materials PM_ 纹理 纹理 Texture T_ 漫反射/颜色贴图 Texture (Diffuse/Albedo/Base Color) T_ 法线贴图 Texture(Normal) T_ 粗糙度贴图 Texture(Roughness) T_ 纹理(透明/不透明) Texture(Alpha/Opacity) T_ 纹理(环境光遮蔽) Texture(Ambient Occlusion) T_ 纹理(碰撞) Texture(Bump) T_ 纹理(放射的) Texture(Emissive) T_ 纹理(遮罩) Texture(Mask) T_ 纹理(反射的) Texture(Specular) T_ 纹理(打包) Texture(Packed) T * 纹理方块 Texture Cube TC_ 多媒体纹理 Media Texture MT_ 渲染目标 Render Target RT_ 方块渲染目标 Cube Render Target RTC_ 光源纹理 Texture Light Profile TLP_ 杂项 动态向量场 Animated Vector Field AVF_ 摄像机 Camera Anim CA_ 颜色曲线 Color Curve CC_ 曲线表 Curve Table CT_ 数据资产 Data Asset 前缀取决于何种类型资源 数据表 Data Table DT_ 浮动曲线 Float Table FTB_ 叶型 Foliage Type FTP_ 力反馈效果 Force Feedback Effect FFE_ 园林草地类型 Landscape Grass Type LG_ 地形层级 Landscape Layer LL_ Matinee Data MD_ 媒体播放器 Media Player MP_ 目标库 Object Library OL_ 转向器 Redirector RD_ 精灵表单 Sprite Sheet SS_ 静态向量场 Static Vector Field SVF_ 触摸接口设置 Touch Interface Setup TIS_ 矢量曲线 Vector Curve VC_ Paper2d 纸质翻页薄 Paper Filpbook PFB_ 精灵体 Sprite SPR_ 精灵图集 Sprite Atlas Group SPRG 瓦片图 Tile Map TM_ 瓦片组 Tile Set TS_ 物理 物理材质 Physical Material PM_ 物理资产 Physical Asset PA_ 可破坏网格 Destructible Mesh DM_ 音乐 对话对象组件 Dialogue Voice DV_ 对话逻辑组件 Dialogue Wave DW_ 媒体声波 Media Sound Wave MSW_ 混响效果 Rever Effect RE_ 衰减声 Aound Attenuation ATT_ 声音类 Sound Class 没有前缀和后缀，这些资源应该放在SoundClasses目录中 声音并发 Sound Concurrency SC_ 声音编辑器 Sound Cue SCU_ 混音 Sound Mix SM_ 声波 Sound Wave SW_ UI 字体 Font F_ 石板刷 Slate Brush SB_ 石板小样式 Slate Widget Style SWS_ 小部件蓝图 Widget Blueprint WBP_ 特效 蓝图 Blueprint BP_ 带骨骼的模型 SK_ 静态模型 Static Module SK_ Apex易损坏的资产 AD_ Apex布料资产 AC_ 活动目标 MT_ Speed Tree ST_ 粒子系统 Particle system PS_ 镜头光晕 Lens flare LF_ 矢量场 Vector field VF_ 声音 Sound S_ 声音提示 SC_ 材质 Material M_ 实例化材质 MI_ 随时间变化的实例化材质 MI_ 材质函数 Material function MF_ 材质函数收集 MPC_ 贴图 T_ 精灵 Sprite SP_ 精灵图标 SS_ 贴图盒 TC_ 渲染目标 Render target RT_ 物理材质 Physical material PM_ 后缀 贴图 基础颜色 Base color _BC 金属 Metallic _MT 高光 Specular _S 粗糙度 Roughness _R 正常 Normal _N 置换 Displacement _DP 环境遮罩 Ambient Occlusion _AO Height Map _H 流动贴图 Flow Map _FM Light Map (fake) _L 遮罩 Mask _M 模型 物理资产 Physical Assets _PA 面部特效资产 _FaceFX 动画 混合空间 Blend space _BS 蓝图动画 Animation Blueprint _AniBP 材质遮罩 角色的RGB遮罩 : R = Metallic G = Roughness B = Subsurface Opacity 角色头发的RGB遮罩: R = Hair Alpha G = Specular/Roughness map B = Anisotropic direction map 环境的RGB遮罩 t: R = Metallic G = Roughness B = Ambient Occlusion Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"项目管理/管理模板.html":{"url":"项目管理/管理模板.html","title":"管理模板","keywords":"","body":"模板下载 右键链接留存为 表单-工作进度 表单-绩点统计 Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"项目管理/代码规范.html":{"url":"项目管理/代码规范.html","title":"代码规范","keywords":"","body":"代码规范 代码规范,我们这里使用UE4官方命名规范 代码规范 工具 Rider与Resharper没有什么区别,在使用的时候 他们都需要VS作为前缀 这里是 Resharper关于UE4规范的链接 Resharper-UE4 Jetbrain的工具永远是开发者必备 Rider C#代码规范 Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"项目管理/培训模板-前端.html":{"url":"项目管理/培训模板-前端.html","title":"培训模板-前端","keywords":"","body":"写这个的时候,是我的团队刚刚转向UE4的时候,因此不是很好,只可以拿去作为参考 项 完成日期 总耗时 评分 面向对象 环境配置 引擎入门 团队协作 编程进阶 网络通信 环境配置 参考文档 软件名字 类型 描述 下载地址 UE4 游戏引擎 虚幻4.26.2 https://www.unrealengine.com/zh-CN/download PlasticSCM 版本控制 Plasticscm10 Plastic SCM - Download Plastic SCM Rider 编程软件 需要以VS作为前置, 专门的UE4开发 https://www.jetbrains.com/lp/rider-unreal/ VS 编程软件 一般开发 https://visualstudio.microsoft.com/zh-hans/vs/ 引擎基础 评分表 项 类型 描述 地址 评分 资源导入 基础 模型导入,UI导入 虚幻4文档/管理内容 资产制作 基础 将美术资源,技术资源根据要求进行整合 大致构架 基础 各种大概的构架 虚幻4文档/创建交互体验 动画 动画 动画的设计与制作 虚幻4文档/为角色和对象添加动画 关卡设计 地图编辑 地图编辑器的使用 虚幻4文档/构建虚拟世界 特效设计 特效师 Material，nigara这些特效类设计 虚幻4文档/设计视觉渲染和图像效果 代码编纂 客户端 代码编写 虚幻4文档/编程与脚本编写 参考文档 Unity 官方手册 Unity https://docs.unity3d.com/cn/current/Manual/index.html UE4官方手册 UE4 https://docs.unrealengine.com/zh-CN/index.html UE4社区知识库 UE4 https://ue4community.wiki/ 团队协作 评分标 项 介绍 评分 权重 工作流 熟悉我们的工作流 3 资产管理 程序命名规范,资产管理规范 3 分支,提交,合并 Plasticscm CheckIn Checkout Branching Merge 2 团队规范 分支规范,Commit规范,Issue,代码 3 参考文档 项 文档地址 描述 工作流 档案-合作方式 代码规范 [Coding Standard \\ Unreal Engine Documentation](https://docs.unrealengine.com/en-US/ProductionPipelines/DevelopmentSetup/CodingStandard/index.html) PlasticScm https://www.plasticscm.com/documentation 编程模式 评分 设计模式 项 简介 评分 单例 命令 享元 状态(有限状态机) 观察者 序列模式 双缓冲 游戏循环 更新方法 行为模式 字节码 子类沙箱 类型对象 解耦模式 组件模式 事件列队 服务定位 优化模式 局部数据 脏标记 对象池 空间分区 参考文档 名字 平台 类型 地址 游戏编程模式 通用 - https://gpp.tkchu.me/ FSM(有限状态机) 通用 FSM https://www.jianshu.com/p/d48e0d565618 LogicDriverPro UE4 FSM 虚幻插件：Logic Driver Pro 终极状态机插件初探_开发游戏的老王-CSDN博客 AI状态机 UE4 FSM https://zhuanlan.zhihu.com/p/88065182javascript:void(0) Delegate UE4 Event Unreal Engine 4 C++自定义事件_shangguanwaner的专栏-CSDN博客 框架与组件常见插件 项 介绍 评分 GamePlay框架 GAS MovemtnComponent OnlineSubSystem/EpicOnlineSystem 参考文档 名字 平台 类型 地址 游戏编程模式 通用 MovementComponent https://auraforge.ca/2019/03/16/unreal-engine-4-custom-physics-mode-for-movement-component/ wiki MovementComponent https://nerivec.github.io/old-ue4-wiki/pages/custom-character-movement-component.html GAS https://docs.unrealengine.com/zh-CN/InteractiveExperiences/GameplayAbilitySystem/index.html EOS/OSS [在线子系统 \\ 虚幻引擎文档 (unrealengine.com)](https://docs.unrealengine.com/zh-CN/ProgrammingAndScripting/Online/index.html) UMG 我们整理的widget介绍 ☐漏了一个ue4 community wiki 网络通信 评分 项 介绍 评分 TCP&UPD 基本原理 变量同步 RPC C/S模式 参考文档 项 平台 UE4-WIKI UE4 https://www.ue4community.wiki/legacy/network-replication-using-replicatedusing/repnotify-vars-2bl75t21\\#server-rep UE4原生 ue4 [联网和多人游戏 \\ 虚幻引擎文档 (unrealengine.com)](https://docs.unrealengine.com/zh-CN/InteractiveExperiences/Networking/index.html) Photon 全平台 https://doc.photonengine.com/en-us/realtime/current/getting-started/realtime-intro 玄东Wong UE4 [UE4]Server RPC 函数的正确定义方式_玄冬Wong-CSDN博客 Dawnarc UE4 [UE4]Networking in Basic - Simple Replication Example (dawnarc.com) 精品 防作弊 项 简介 评分(10分制) 作弊-联网权限 ..... 这个我不知道怎么说 太基础了 作弊-内存修改 通过作弊器修改内存 作弊-代理挂机 使用程序模拟玩家进入游戏 作弊-透视类 让玩家可以透过强瞄准 作弊-速度类 通过修改\"发送频率\"或者其他 作弊与反作弊系统-vis2k 文档编写 评分 项 简介 评分 时间管理 正确判断大概所需工作时 需求(非联网) 针对单机游戏的用法文档 需求分析(联网) 针对联机游戏的编写 那些需要同步,那些不需要 编程模式(构架) 能否使用正确的编程模式进行编写 最常见的就是 状态机 命令 观察者 结构编写 编写正确的结构体 引用 引用其他的文档 参考文档 项 简介 研发文档编写指南 指南-系统/研发-编纂 Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"项目管理/培训模板-后端.html":{"url":"项目管理/培训模板-后端.html","title":"培训模板-后端","keywords":"","body":"模板-入职-程序-后端 项 完成日期 总耗时 评分 环境配置 常见框架 团队协作 编程进阶 文档编写 环境配置 参考文档 Mysql 数据库 https://www.unrealengine.com/zh-CN/download Redis 数据库 Git 版本控制 http://npm.taobao.org/mirrors/git-for-windows/v2.31.1.windows.1/Git-2.31.1-64-bit.exe Rider 编程软件 https://visualstudio.microsoft.com/zh-hans/vs/ Idea 编程软件 VS 编程软件 https://www.jetbrains.com/rider/ 基础概念 评分表 概念 介绍 评分 C/S模式 CI/CD 关系型数据库 OAuth Routing DSL Socket Cookie Session HTTP Metric SSL 反向代理 表单 Rpc 常见工具 软件 项 类型 语言 描述 Mysql 数据库 Redis 数据库 Apache 反向代理 Nginx 反向代理 Jenkins CI/CD GitLab CI/CD 框架 SpringBot 框架 Java Netty 框架 Java KTor 框架 Kotlin GRpc RPC Any 团队协作 评分标 项 介绍 评分 权重 工作流 熟悉我们的工作流 3 git 2 规范 分支规范,Commit规范 3 参考文档 项 文档地址 描述 工作流 档案-合作方式 资产管理 指南-资产管理-UE4 分支管理 指南-程序-分支管理 Commit规范 指南-程序-Commit管理 研发文档 指南-系统/研发-编纂 Git官方文档 https://www.git-scm.com/book/zh/v2 Git重点 编程模式 评分 设计模式 项 简介 评分 单例 命令 享元 状态(有限状态机) 观察者 序列模式 双缓冲 游戏循环 更新方法 解耦模式 组件模式 事件列队 服务定位 优化模式 局部数据 脏标记 对象池 空间分区 Web模式 MVC ORM 文档编写 评分 项 简介 评分 时间管理 正确判断大概所需工作时 需求分析(联网) 针对联机游戏的编写 那些需要同步,那些不需要 编程模式(构架) 能否使用正确的编程模式进行编写 最常见的就是 状态机 命令 观察者 引用 引用其他的文档 参考文档 项 简介 研发文档编写指南 指南-系统/研发-编纂 Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"小窍门/智力提高/控食法.html":{"url":"小窍门/智力提高/控食法.html","title":"控食法","keywords":"","body":"饥饿导致的智力提高 有更好的修改的建议,欢迎开一个Issue提出 本人在大学期间由于生活费不足,导致有的时候饭都吃不饱. 于是发现, 自从吃的少了,不喝饮料了,大脑瞬间清醒了. 需要注意,本文可能是伪科学,我并没有进行相应的研究,是通过实践得到的结论. 注意,本文仅适用于智力劳动者. 请准备DuolingoApp,在食用早餐的时候,能够学一会儿外语. DuolingGo英语考试 Duolingo在线学习 学英语没啥用,烂大街. 日语 游戏公司,音乐 俄语 对外贸易,科研 方法 吃的太多会困,吃的太少会饿晕,请自行依据自己调整食量 不要喝其他饮料,比如说 可乐 早上- 7:30 早上好,稍微运动运动,开始一天吧. 早餐 饮料 左旋肉碱 小跑500M 日常工作 8:30~12:00 指的是不需要很耗闹的工作 行政: 合同整理 销售: 回复邮件 程序: 代码编写 数学: 数学计算 咱们坐办公室的,前一个小时,不都得逛逛各种东西,回复邮件什么的. 补餐-10:30 或 15:00 左旋肉碱 水果 午餐: 11:30 为了下午的高强度工作做准备 肉 淀粉制品 咖啡 蔬菜 午觉 是必须的,让你感觉更精神 高强度工作 13:00~17:00 指的是需要思考,脑子炸裂的工作 行政: 思考规章 销售: 面见客户 程序: 系统策划,环境配置 数学: 算法设计 晚上 娱乐时间 对于我们来说,晚上才是最需要消耗能量时候 正餐 玩游戏/社交/健身 和对象羞羞 这个是增进情感与提高睡眠质量与开启新的一天的关键. 如果没有对象,就去找一个 阅读 睡觉 正餐 饿了么/美团 知道吧. 随便一碗15元左右的外卖. 必须有米或者面 早餐 推荐-仅限一个: 包子 鸡肉饼 煎包 推荐-一餐: 沙县 推荐-吃到饱: 肠粉 推荐-一碗: 王饱饱麦片 推荐一块: 无骨炸鸡 包子,鸡肉饼都可以, 笔者目前住在大学内,食用的是鸡肉饼. 水果 其实水果没什么好推荐的,这个推荐是按照水果的大小进行分类,爱吃啥吃啥. 如果可以建议拌酸奶. 推荐-半个: 苹果 梨子 任意一个单位的 推荐-一个: 牛油果 李子 任意一颗为单位的 推荐-一小碟: 樱桃 葡萄 任意一粒为单位的 推荐-一小块: 西瓜 榴莲 柚子 任意特别大的 肉 量: 四分之一个自己拳头的体积就差不多了 肉其实没啥好推荐的,按照自己口味吧. 推荐鱼肉,如果你喜欢口味好的就选牛肉. 鸡蛋也是可以的,就是蛋黄脂肪过高了. 蔬菜 蔬菜没有能量,爱吃多少吃多少. 淀粉制品 黄种人必须每天都摄入米饭,否则会腹泻,吃西餐前吃一小碗就不担心腹泻了,不论你是中国还是韩国还是日本 推荐: 米饭 0.5元 土豆 一个,推荐和米饭拌着吃,加点葱和醋 面包 1/3特香包, 或者3片土司 面条 红薯 半个 饮料 豆浆 豆浆就是豆浆,没什么好推荐的. 你可以加一点牛奶和糖. 茶 蜜雪冰城 推荐蜜雪冰城任意茶. 全糖很好喝,但没有茶味. 半糖茶味更浓,刚刚好. 如果你是在北方的南方人,推荐 四季春. 其他的则推荐绿茶. 奶茶 自己煮奶茶,水+茶把茶水煮出来,然后加牛奶和糖. 注意是煮茶不是泡茶!! 推荐福建产的绿茶. 咖啡 中午喝咖啡则一定要睡午觉 其实茶更适合中国人,毕竟喝了几千年了. 但是咖啡更能激励精神. 学生党 推荐雀巢咖啡,还会送你一个小杯子. 如果实在没钱,就选蓝山咖啡. 经济选项 豆: 云南咖啡豆,一般淘宝店会可以帮你研磨 杯: 法压壶 有钱选项 瑞幸咖啡,享受生活吧. 人家割美国韭菜给我们咖啡,还不支持支持. 左旋肉碱 量: 一般是两粒 左旋肉碱是必须服用的,否则无法撑过饥饿, 他能够提高脂肪转运效率. 推荐: 汤臣倍健 修正 汤臣倍健含有总黄酮,而且量是最足的. 常见问题 胰岛素风暴 当你吃玩东西后,血糖会升高,胰岛素会分泌,降血糖, 导致大脑昏昏沉沉的. 看过没,蜘蛛子在进化的时候是不是会睡觉? 就是把能量转化为自己身体的一部分. 为什么晚上吃 你只有早上吃了,晚上吃一顿刚刚好补充能量 我们程序猿是会工作到晚上9点以后的,能量正好够用,剩下的睡觉用. Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "},"小窍门/智力提高/面向对象法.html":{"url":"小窍门/智力提高/面向对象法.html","title":"面向对象法","keywords":"","body":"面向对象的智力提高 是的,字面意思,面向你的对象 结论 找一个桌子,靠在你对象旁边,不是面对面坐,而是靠着坐,方便累的时候抱抱,或者说完成一个模块后来一发. 有什么比在对象普遍工作更快乐的事情么? 科学依据 苯基乙胺: 让你忘记疲惫 多巴胺: 让你写程序上头 去甲肾上腺素: 防止你心肌梗塞 内啡肽: 提高智力,专注力,让你对编程上瘾 婚姻的本制就是让你对对象上瘾,离不开对象 血清素: 单纯的让你感到幸福 脑下垂体后叶荷尔蒙: 让你更仔细的检查bug 我的直觉告诉我,我的对象这个分泌极多. Copyright © IndieClub 2021 all right reserved，powered by Gitbook该文章修订时间： 2021-07-06 16:23:28 "}}